####################################
# Title: Calculating the Electric  #
# Filename: visual_problem_set2.py #
# Original Author: Joe Griffin     #
# Most Recent Edit: 2/23/2014	   #
# Last Editor: Nicole Zatorski     #
####################################

# This script is meant to act as a large, complex calculator for the field at the origin, and other locations
#   generated by a set of two point charges. The script has been modified to graphically represent:
#   the charges, their E-field at the origin, and the E field at other locations.


from visual import *
from math import sqrt, pi                                       
E0 = 8.854187817e-12                                                # Permittivity of free space constant:

k = 1.0 / (4 * pi * E0)

q= [None, None]                                                      # List of all charges
origin = [0, 0, 0]                                                   # Point where you are calculating the electric field
point_1 = [.5, 0, 0]                                                 #   [x, y, z]
point_2 = [0, 0, -.5]
point_3 = [-.5, 0, 0]
point_4 = [0, 0, .5]

list_points = [origin, point_1, point_2, point_3, point_4]
 
charge_red = [0, .5, 0, (4 * pi * E0)]                                # Charges are represented as [x, y, z, q]
charge_blue = [0, (-.5), 0, (-4 * pi * E0)]
q[0] = charge_red
q[1] = charge_blue

Q_red = sphere(pos= vector(0, .5, 0), radius=0.1, color=color.red)    # Draw the charges
Q_blue = sphere(pos= vector(0, -.5, 0), radius=0.1, color=color.blue)

for elt in list_points:
    E_red = [None, None, None]                                        # Calculate contribution to net electric field
    mag=sqrt((q[0][0]**2) + (q[0][1]**2) + (q[0][2]**2))              #   of a single charge at each point in list_points
    
    E_red[0] = k * (q[0][3] / (mag**2)) * ((elt[0] - q[0][0]) / mag)  # Electric field is [E_x, E_y, E_z]
    E_red[1] = k * (q[0][3] / (mag**2)) * ((elt[1] - q[0][1]) / mag)  # E[0] represents electric field
    E_red[2] = k * (q[0][3] / (mag**2)) * ((elt[2] - q[0][2]) / mag)  #   contribution from q[0]

    E_blue = [None, None, None]
    mag=sqrt((q[1][0]**2) + (q[1][1]**2) + (q[1][2]**2))

    E_blue[0] = k * (q[1][3] / (mag**2)) * ((elt[0] - q[1][0]) / mag)
    E_blue[1] = k * (q[1][3] / (mag**2)) * ((elt[1] - q[1][1]) / mag)
    E_blue[2] = k * (q[1][3] / (mag**2)) * ((elt[2] - q[1][2]) / mag)


    E = [E_red, E_blue]

    E_tot = [None, None, None]                                        # Once we have individual fields, we
    E_tot[0] = E[0][0] + E[1][0]                                      #   can add together the components to
    E_tot[1] = E[0][1] + E[1][1]                                      #   create the total field
    E_tot[2] = E[0][2] + E[1][2]                            
    print 'E at', elt, '=', E_tot, 'N/C'
                                                                      # Draw the E field arrow
    Earrow_tot = arrow(pos = vector(elt[0],elt[1],elt[2]), axis = vector(E_tot[0], E_tot[1],E_tot[2]), shaftwidth = 0.05, color = color.green)


